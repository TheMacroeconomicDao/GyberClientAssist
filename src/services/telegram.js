import { TelegramClient } from 'telegram';
import { NewMessage } from 'telegram/events/index.js';
import { Api } from 'telegram/tl/api.js';
import input from 'input';
import { ModelPersonality } from '../config/personality.js';

export class TelegramService {
	constructor(session, apiId, apiHash) {
		this.client = new TelegramClient(session, 
			parseInt(apiId), 
			apiHash, 
			{
				connectionRetries: 5,
				useWSS: true
			}
		);
		
		this.personality = ModelPersonality;
	}

	async handleMessages(messageHandler) {
		try {
			const me = await this.client.getMe();
			
			this.client.addEventHandler(async (event) => {
				try {
					const message = event.message;
					if (!message || message.fromId?.userId === me.id) return;
					
					await this.addDefaultReaction(message);
					
					if (message.message) {
						console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.message}`);
						
						const result = await messageHandler(message);
						
						if (result?.response) {
							await this.sendMessage(message.chat.id, result.response, message.id);
							console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç:', result.response);
							
							if (result.sentiment) {
								await this.updateReaction(message, result.sentiment);
							}
						}
					}
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
				}
			}, new NewMessage({}));
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
		}
	}

	async addDefaultReaction(message) {
		try {
			const reaction = this.personality.getReaction(0);
			
			await this.client.invoke(new Api.messages.SendReaction({
				peer: message.peerId,
				msgId: message.id,
				reaction: [{
					emoticon: reaction
				}]
			}));
			
			console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è: ${reaction}`);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏:', error);
		}
	}

	async updateReaction(message, sentiment) {
		try {
			let reaction;
			if (sentiment > 0.5) {
				reaction = '‚ù§Ô∏è';
			} else if (sentiment > 0) {
				reaction = 'üëç';
			} else if (sentiment < -0.5) {
				reaction = 'üò¢';
			} else if (sentiment < 0) {
				reaction = 'üëé';
			} else {
				reaction = 'ü§î';
			}

			await this.client.invoke(new Api.messages.SendReaction({
				peer: message.peerId,
				msgId: message.id,
				reaction: [{
					emoticon: reaction
				}]
			}));
			
			console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞: ${reaction}`);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏:', error);
		}
	}

	async sendMessage(chatId, text, replyTo = null) {
		try {
			await this.client.sendMessage(chatId, {
				message: text,
				replyTo: replyTo
			});
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
		}
	}

	async start() {
		try {
			await this.client.connect();
			
			if (!await this.client.isUserAuthorized()) {
				console.log('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
				await this.client.start({
					phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
					password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω): '),
					phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥: '),
					onError: (err) => console.log(err),
				});
			} else {
				console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π');
			}

			const me = await this.client.getMe();
			console.log(`–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫: ${me.username || me.firstName}`);
			return me;
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
			throw error;
		}
	}

	async handleCommand(message) {
		const command = message.message.toLowerCase();
		
		switch (command) {
			case '/start':
				await this.sendReply(message, 
					'–ü—Ä–∏–≤–µ—Ç! –Ø GyberAssist - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—âÔøΩÔøΩ–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n' +
					'/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n' +
					'/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n' +
					'/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞'
				);
				break;
			
			case '/help':
				await this.sendReply(message,
					'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
					'/start - –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n' +
					'/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
					'/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n' +
					'/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n' +
					'–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!'
				);
				break;

			case '/clear':
				const response = this.gptService.clearContext();
				await this.sendReply(message, response);
				break;

			case '/status':
				await this.sendReply(message,
					'–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n' +
					`- –ê–∫—Ç–∏–≤–µ–Ω: –¥–∞\n` +
					`- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString()}\n` +
					`- –í–µ—Ä—Å–∏—è: 1.0.0`
				);
				break;

			default:
				await this.sendReply(message, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. ÔøΩÔøΩ—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
		}
	}

	async sendError(message) {
		await this.sendReply(message, 
			'–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
		);
	}

	async sendReply(message, response) {
		try {
			const replyText = typeof response === 'object' ? response.response : response;
			
			await message.reply({
				message: replyText,
				replyToMsgId: message.id
			});
			console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç:', replyText);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:', error);
		}
	}

	async addReaction(message, sentiment) {
		try {
			const reaction = this.personality.getReaction(sentiment);
			
			await this.client.invoke(new Api.messages.SendReaction({
				peer: message.peerId,
				msgId: message.id,
				reaction: [{
					emoticon: reaction
				}]
			}));

			console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è ${reaction}`);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏:', error);
		}
	}
}